struct SolidWireFrameGeoInput
{
  [Input] var ViewPosition : Real3;
  [Input] var PerspectivePosition : Real4;
}

struct SolidWireFrameGeoOutput
{
  [Output] var Distance : Real3;
}

[Geometry(maxVertices : 3)]
struct SolidWireFrameGeo
{
  [BuiltInInput] var ViewportSize : Real2;
  
  function Main(input : TriangleInput[SolidWireFrameGeoInput], output : TriangleOutput[SolidWireFrameGeoOutput])
  {
    // Convert to pixel space
    var p0 = this.ViewportSize * input[0].PerspectivePosition.XY / input[0].PerspectivePosition.W;
    var p1 = this.ViewportSize * input[1].PerspectivePosition.XY / input[1].PerspectivePosition.W;
    var p2 = this.ViewportSize * input[2].PerspectivePosition.XY / input[2].PerspectivePosition.W;
    
    var v0 = p2 - p1;
    var v1 = p2 - p0;
    var v2 = p1 - p0;
    // Compute double the area of the triangle 
    var doubleArea =  Math.Abs(v1.X * v2.Y - v1.Y * v2.X);
    // Compute the length of the bases of each triangle (with respect to another vertex)
    var baseLengths = Real3(Math.Length(v0), Math.Length(v1), Math.Length(v2));
    // Compute the height for each triangle as (2 * area) / base
    var heights = Real3(doubleArea) / baseLengths;
    
    // For each vertex, output the number of pixels away it is from the opposite edge
    var outV = SolidWireFrameGeoOutput();
    outV.Distance = Real3(heights[0], 0, 0);
    output.Append(outV, 0);
    
    outV.Distance = Real3(0, heights[1], 0);
    output.Append(outV, 1);
    
    outV.Distance = Real3(0, 0, heights[2]);
    output.Append(outV, 2);
  }
}

[Pixel]
struct SolidWireFramePixel
{
  // Do we draw filled or empty wire frames
  [PropertyInput] var Active : Boolean = true;
  // How many pixels thick the wire frame should be
  [PropertyInput] var Pixels : Integer = 10;
  [PropertyInput] var EdgeColor = Real4(1);
  
  // Inputs from the geometry shader
  [StageInput] var Distance : Real3;
  //[StageInput] var EdgeDistances : Real3;
  
  // Inputs from the pixel shader
  [FragmentInput][Output] var Color : Real4;
  
  function GetIndex() : Integer
  {
    // Find which edge we are closest to
    if(this.Distance.X < this.Distance.Y && this.Distance.X < this.Distance.Z)
      return 0;
    else if(this.Distance.Y < this.Distance.X && this.Distance.Y < this.Distance.Z)
      return 1;
    return 2;
  }
  
  function Main()
  {
    var index = this.GetIndex();
    var distance = this.Distance[index];
    
    // Compute an interpolant for the colors
    var t = 1.0 - Math.SmoothStep(-2, this.Pixels, distance);
    
    // Interpolate all of the default values on core zero materials between black and their original value
    t *= (this.Active as Real);
    this.Color = Math.Lerp(this.Color, this.EdgeColor, t);
    
  }
}